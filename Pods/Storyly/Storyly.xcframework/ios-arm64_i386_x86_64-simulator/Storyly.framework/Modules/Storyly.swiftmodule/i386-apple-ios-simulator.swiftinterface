// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Storyly
import AVFoundation
import AVKit
import CoreLocation
import CoreTelephony
import Foundation
import QuartzCore
import SDWebImage
@_exported import Storyly
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
extension Array {
  @inlinable internal func after(where predicate: (Element) -> Swift.Bool) -> Element? {
        if let index = self.firstIndex(where: predicate), index + 1 <= self.count {
            return index + 1 == self.count ? nil : self[index + 1]
        }
        return nil
    }
}
@objc(StorylyView) final public class StorylyView : UIKit.UIView {
  @objc final public var storylyInit: Storyly.StorylyInit {
    @objc get
    @objc set
  }
  @objc weak final public var rootViewController: UIKit.UIViewController?
  @objc weak final public var delegate: Storyly.StorylyDelegate?
  @objc weak final public var storylyAdViewProvider: Storyly.StorylyAdViewProvider?
  @objc weak final public var storylyLoadingView: Storyly.StorylyLoadingView? {
    @objc get
    @objc set
  }
  @objc final public var storyGroupIconBorderColorSeen: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @objc final public var storyGroupIconBorderColorNotSeen: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupIconBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupIconForegroundColors: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupTextFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupPinIconColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc final public var storyItemIconBorderColor: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyItemTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyItemTextFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyInteractiveFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc final public var storylyItemProgressBarColor: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupSize: Swift.String {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyGroupIconHeight: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyGroupIconWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyGroupIconCornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyGroupTextIsVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyHeaderTextIsVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyHeaderIconIsVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyHeaderCloseButtonIsVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyGroupListPaddingBetweenItems: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @objc final public var storyGroupListEdgePadding: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc final public var storyGroupIconStyling: Storyly.StoryGroupIconStyling {
    @objc get
    @objc set
  }
  @objc final public var storyGroupTextStyling: Storyly.StoryGroupTextStyling {
    @objc get
    @objc set
  }
  @objc final public var storyHeaderStyling: Storyly.StoryHeaderStyling {
    @objc get
    @objc set
  }
  @objc final public var storyGroupListStyling: Storyly.StoryGroupListStyling {
    @objc get
    @objc set
  }
  @objc final public var storyGroupIconColorStyling: Storyly.StoryGroupIconColorStyling {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupIVodIconColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var storyGroupIconImageThematicLabel: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable final public var languageCode: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension StorylyView {
  @objc override final public func willMove(toWindow newWindow: UIKit.UIWindow?)
}
extension StorylyView {
  @objc final public func refresh()
  final public func openStory(storyGroupId: Swift.Int, storyId: Swift.Int? = nil) -> Swift.Bool
  @objc(openStoryWithId:storyId:) final public func openStory(storyGroupId: Foundation.NSNumber, storyId: Foundation.NSNumber?) -> Swift.Bool
  @objc final public func openStory(payload: Foundation.URL) -> Swift.Bool
  @objc final public func pause()
  @objc final public func resume()
  @objc final public func dismiss(animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @objc final public func present(animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  final public func setExternalData(externalData: [[Swift.String : Any?]]) -> Swift.Bool
  @objc final public func showExternalActionView(externalActionView: UIKit.UIView)
  @objc final public func dismissExternalActionView()
  @objc(setExternalData:) final public func setExternalData(externalData: [Foundation.NSDictionary]) -> Swift.Bool
}
@objc final public class StoryGroupIconColorStyling : ObjectiveC.NSObject {
  @objc final public var storyGroupIVodIconBorderColorSeen: [UIKit.UIColor]
  @objc final public var storyGroupIVodIconBorderColorNotSeen: [UIKit.UIColor]
  @objc final public var storyGroupIVodIconColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryGroupIconStyling : ObjectiveC.NSObject {
  @objc final public var height: CoreGraphics.CGFloat
  @objc final public var width: CoreGraphics.CGFloat
  @objc final public var cornerRadius: CoreGraphics.CGFloat
  @objc public init(height: CoreGraphics.CGFloat, width: CoreGraphics.CGFloat, cornerRadius: CoreGraphics.CGFloat)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryGroupTextStyling : ObjectiveC.NSObject {
  @objc final public var isVisible: Swift.Bool
  @objc public init(isVisible: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryHeaderStyling : ObjectiveC.NSObject {
  @objc final public var isTextVisible: Swift.Bool
  @objc final public var isIconVisible: Swift.Bool
  @objc final public var isCloseButtonVisible: Swift.Bool
  @objc public init(isTextVisible: Swift.Bool, isIconVisible: Swift.Bool, isCloseButtonVisible: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryGroupListStyling : ObjectiveC.NSObject {
  @objc final public var edgePadding: CoreGraphics.CGFloat
  @objc final public var paddingBetweenItems: CoreGraphics.CGFloat
  @objc public init(edgePadding: CoreGraphics.CGFloat, paddingBetweenItems: CoreGraphics.CGFloat)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol StorylyLoadingView {
  @objc func getView() -> UIKit.UIView
  @objc func show()
  @objc func hide()
}
@objc public protocol StorylyAdViewProvider {
  @objc(onRequest::) func onRequest(adViewListener: Storyly.StorylyAdViewListener, frame: CoreGraphics.CGRect)
}
@objc public protocol StorylyAdViewListener {
  @objc(onLoad:) func onLoad(adView: Storyly.StorylyAdView)
}
@objc public protocol StorylyAdView {
  @objc var onActionClicked: (() -> Swift.Void)? { get set }
  @objc func getView() -> UIKit.UIView
  @objc func getIcon() -> Foundation.URL
  @objc func getTitle() -> Swift.String
  @objc func getCustomData() -> [Swift.String : Any]
  @objc func destroy()
  @objc func load() -> Swift.Int
  @objc func pause()
  @objc func reset()
  @objc func resume()
  @objc func setLayers(layers: [Swift.String : UIKit.UIView])
  @objc func checkHit(touch: UIKit.UITouch) -> Swift.Bool
}
@objc public protocol StorylyDelegate {
  @objc optional func storylyLoaded(_ storylyView: Storyly.StorylyView, storyGroupList: [Storyly.StoryGroup])
  @objc optional func storylyLoadFailed(_ storylyView: Storyly.StorylyView, errorMessage: Swift.String)
  @objc optional func storylyActionClicked(_ storylyView: Storyly.StorylyView, rootViewController: UIKit.UIViewController, story: Storyly.Story)
  @objc optional func storylyStoryPresented(_ storylyView: Storyly.StorylyView)
  @objc optional func storylyStoryDismissed(_ storylyView: Storyly.StorylyView)
  @objc optional func storylyUserInteracted(_ storylyView: Storyly.StorylyView, storyGroup: Storyly.StoryGroup, story: Storyly.Story, storyComponent: Storyly.StoryComponent)
  @objc optional func storylyEvent(_ storylyView: Storyly.StorylyView, event: Storyly.StorylyEvent, storyGroup: Storyly.StoryGroup?, story: Storyly.Story?, storyComponent: Storyly.StoryComponent?)
}
@objc final public class StorylyInit : ObjectiveC.NSObject {
  @objc final public let segmentation: Storyly.StorylySegmentation
  @objc convenience public init(storylyId: Swift.String)
  @objc convenience public init(storylyId: Swift.String, segmentation: Storyly.StorylySegmentation)
  @objc convenience public init(storylyId: Swift.String, isTestMode: Swift.Bool)
  @objc convenience public init(storylyId: Swift.String, customParameter: Swift.String)
  @objc public init(storylyId: Swift.String, segmentation: Storyly.StorylySegmentation, customParameter: Swift.String?)
  @objc public init(storylyId: Swift.String, segmentation: Storyly.StorylySegmentation, customParameter: Swift.String?, isTestMode: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StorylySegmentation : ObjectiveC.NSObject {
  @objc final public var segments: Swift.Set<Swift.String>? {
    @objc get
    @objc set
  }
  @objc public init(segments: Swift.Set<Swift.String>?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum StorylyEvent : Swift.Int {
  case StoryGroupOpened
  case StoryGroupDeepLinkOpened
  case StoryGroupProgrammaticallyOpened
  case StoryGroupCompleted
  case StoryGroupPreviousSwiped
  case StoryGroupNextSwiped
  case StoryGroupClosed
  case StoryImpression
  case StoryCompleted
  case StoryPreviousClicked
  case StoryNextClicked
  case StoryPaused
  case StoryResumed
  case StoryShared
  case StoryCTAClicked
  case StoryEmojiClicked
  case StoryPollAnswered
  case StoryQuizAnswered
  case StoryCountdownReminderAdded
  case StoryCountdownReminderRemoved
  case StoryRated
  case StoryInteractiveImpression
  case StoryProductTagExpanded
  case StoryProductTagClicked
  case StorylyIVodReplayButtonClicked
  case StorylyIVodSeeked
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class StorylyEventHelper : ObjectiveC.NSObject {
  @objc public static func storylyEventName(event: Storyly.StorylyEvent) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum StoryType : Swift.Int, Swift.Decodable {
  case Unknown
  case Image
  case Video
  case Vod
  case Ad
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum StoryGroupSize : Swift.Int {
  case Small
  case Large
  case XLarge
  case Custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc final public class StoryGroup : ObjectiveC.NSObject {
  @objc final public let id: Swift.Int
  @objc final public let title: Swift.String
  @objc final public let iconUrl: Foundation.URL
  @objc final public let index: Swift.Int
  @objc final public let seen: Swift.Bool
  @objc final public let stories: [Storyly.Story]
  @objc public init(id: Swift.Int, title: Swift.String, iconUrl: Foundation.URL, index: Swift.Int, seen: Swift.Bool, stories: [Storyly.Story])
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class Story : ObjectiveC.NSObject {
  @objc final public let id: Swift.Int
  @objc final public let title: Swift.String
  @objc final public let index: Swift.Int
  @objc final public let seen: Swift.Bool
  @objc final public let media: Storyly.StoryMedia
  @objc public init(id: Swift.Int, index: Swift.Int, title: Swift.String, seen: Swift.Bool, media: Storyly.StoryMedia)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryMedia : ObjectiveC.NSObject {
  @objc final public let type: Storyly.StoryType
  @objc final public let actionUrlList: [Swift.String]?
  @objc final public let actionUrl: Swift.String?
  @objc public init(type: Storyly.StoryType, actionUrlList: [Swift.String]?, actionUrl: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class StoryComponent : ObjectiveC.NSObject {
  @objc public var type: Storyly.StoryComponentType {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum StoryComponentType : Swift.Int {
  case Undefined
  case Quiz
  case Poll
  case Emoji
  case Rating
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc final public class StoryQuizComponent : Storyly.StoryComponent {
  @objc override final public var type: Storyly.StoryComponentType {
    @objc get
  }
  @objc final public let title: Swift.String
  @objc final public let options: [Swift.String]
  @objc final public let rightAnswerIndex: Foundation.NSNumber?
  @objc final public let selectedOptionIndex: Swift.Int
  @objc final public let customPayload: Swift.String?
  @objc public init(title: Swift.String, options: [Swift.String], rightAnswerIndex: Foundation.NSNumber?, selectedOptionIndex: Swift.Int, customPayload: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryPollComponent : Storyly.StoryComponent {
  @objc override final public var type: Storyly.StoryComponentType {
    @objc get
  }
  @objc final public let title: Swift.String
  @objc final public let options: [Swift.String]
  @objc final public let selectedOptionIndex: Swift.Int
  @objc final public let customPayload: Swift.String?
  @objc public init(title: Swift.String, options: [Swift.String], selectedOptionIndex: Swift.Int, customPayload: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryEmojiComponent : Storyly.StoryComponent {
  @objc override final public var type: Storyly.StoryComponentType {
    @objc get
  }
  @objc final public let emojiCodes: [Swift.String]
  @objc final public let selectedEmojiIndex: Swift.Int
  @objc final public let customPayload: Swift.String?
  @objc public init(emojiCodes: [Swift.String], selectedEmojiIndex: Swift.Int, customPayload: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class StoryRatingComponent : Storyly.StoryComponent {
  @objc override final public var type: Storyly.StoryComponentType {
    @objc get
  }
  @objc final public let emojiCode: Swift.String
  @objc final public let rating: Swift.Int
  @objc final public let customPayload: Swift.String?
  @objc public init(emojiCode: Swift.String, rating: Swift.Int, customPayload: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
extension Storyly.StoryGroupSize : Swift.Equatable {}
extension Storyly.StoryGroupSize : Swift.Hashable {}
extension Storyly.StoryGroupSize : Swift.RawRepresentable {}
extension Storyly.StorylyEvent : Swift.Equatable {}
extension Storyly.StorylyEvent : Swift.Hashable {}
extension Storyly.StorylyEvent : Swift.RawRepresentable {}
extension Storyly.StoryType : Swift.Equatable {}
extension Storyly.StoryType : Swift.Hashable {}
extension Storyly.StoryType : Swift.RawRepresentable {}
extension Storyly.StoryComponentType : Swift.Equatable {}
extension Storyly.StoryComponentType : Swift.Hashable {}
extension Storyly.StoryComponentType : Swift.RawRepresentable {}
